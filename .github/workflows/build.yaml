name: build

on: push

jobs:
  build:
    name: Build & Push Container Image
    runs-on: ubuntu-20.04
    needs:
      - lint
      - unit-test
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: ecr
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dreamkast-ecs
          DOCKER_BUILDKIT: 1
        run: |
          echo REF ${{ github.ref }}
          echo HEAD REF ${{ github.head_ref }}
          echo SHA ${{ github.sha }}
          IMAGE_TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && IMAGE_TAG=$(echo $IMAGE_TAG | sed -e 's/^v//')

          if [ ! -e ${{ github.head_ref }} ]; then
            IMAGE_TAG=${{ github.head_ref }}
          fi

          CACHE_NODE=$ECR_REGISTRY/$ECR_REPOSITORY:node-cache
          CACHE_FETCH_LIB=$ECR_REGISTRY/$ECR_REPOSITORY:fetch-lib-cache
          CACHE_COMPILE_CACHE=$ECR_REGISTRY/$ECR_REPOSITORY:asset-compile-cache

          IMAGE_WITH_TAG=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          IMAGE_WITH_SHA=$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          IMAGE_WITH_TAG_AND_SHA=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG-${{ github.sha }}

          docker build \
            --cache-from=$CACHE_NODE \
            --cache-from=$CACHE_FETCH_LIB \
            --cache-from=$CACHE_COMPILE_CACHE \
            --build-arg=BUILDKIT_INLINE_CACHE=1 \
            -t $IMAGE_WITH_TAG \
            -t $IMAGE_WITH_SHA .

          docker build --target node -t $CACHE_NODE --build-arg=BUILDKIT_INLINE_CACHE=1  .
          docker build --target fetch-lib -t $CACHE_FETCH_LIB --build-arg=BUILDKIT_INLINE_CACHE=1  .
          docker build --target asset-compile -t $CACHE_COMPILE_CACHE --build-arg=BUILDKIT_INLINE_CACHE=1  .

          docker tag $IMAGE_WITH_TAG $IMAGE_WITH_SHA
          docker push $IMAGE_WITH_TAG
          docker push $IMAGE_WITH_SHA
          docker push $IMAGE_WITH_TAG_AND_SHA
          docker push $CACHE_NODE
          docker push $CACHE_FETCH_LIB
          docker push $CACHE_COMPILE_CACHE

