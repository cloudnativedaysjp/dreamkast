require 'slack/incoming/webhooks'

namespace :util do
  desc 'add_talks_for_cicd2023_rehearsal_dummy_sessions'
  task add_talks_for_cicd2023_rehearsal_dummy_sessions: :environment do
    ActiveRecord::Base.logger = Logger.new($stdout)
    Rails.logger.level = Logger::DEBUG
    conference = Conference.find_by(abbr: 'cicd2023')
    rehearsal_day = conference.conference_days.find_by(date: '2023-03-19')

    talks = {
      A: [
        {
          title: '大規模レガシーテストを倒すためのCI基盤の作り方',
          start_time: '12:20:00',
          end_time: '13:00:00',
          abstract: <<~EOS
            筆者の所属企業では現在CI基盤の作り直しを行なっています。従来のCI基盤には以下のような課題がありました。

            * レガシーなテストがあり、環境に触れづらく、なるべくその まま移行したい
            * テスト件数が非常に多い（10,000件〜）
            * 富豪的にSaaS/クラウドリソースを使っており、コストが最適でない
            * コードリポジトリであるGitHubとの連携をもっといい感じにしたい

            これらの課題を解決するためにどのような技術選定とアーキテクチャ設計をし、またいかにコスト等を最適化したかをお話しします。
            また、CI基盤のベ ースとしてCloud Build、Cloud Functions、Cloud Pub/SubなどGoogle Cloudのサービスを用いており、それらについての具体的なTipsも交える予定です。"
          EOS
        },
        {
          title: '最高の開発者体験を目指してAWS CDKでCI/CDパイプラインを改善し続けている話',
          start_time: '13:20:00',
          end_time: '14:00:00',
          abstract: <<~EOS
            私達NewsPicks/AlphaDriveは、プロダクト開発者全員が「ユーザーに価値を届ける」ことを重視し、フロントエンド・バックエンドの開発に限らずインフラ・DevOpsにも積極的に関与し ています。
            AWS CDKの導入により、開発者自身が馴染みのあるプログラミング言語でインフラやCI/CDパイプラインの構築・管理を行うことができ、開発者がフルサイクルのオーナーシッ プを発揮することに役立っています。しかし、サービスの規模やチームが拡大するにつれて、運用上の問題も見えてきました。
            本セッションでは、CDKを導入したことによる恩恵や私達のCI/CDパイプライン、また抱えている問題やそれに対する試行錯誤をご紹介させていただきます。
            (NewsPicks/AlphaDriveで20分ずつの2パート40分の発表を予定しています)
          EOS
        },
        {
          title: 'UbieはなぜSnykを選んだのか？安全で高速なアプリケーション開発ライフサイクルの実現へ',
          start_time: '14:20:00',
          end_time: '15:00:00',
          abstract: <<~EOS
            ヘルスケア領域において「テクノロジーで人々を適切な医療に案内する」ことをミッションに掲げるUbieは、開発ライフサイクル全体に亘りセキュリティを担保しながらも高速にアプリ ケーション開発ができるSnykを導入しました。本セッションでは、高速なアプリケーション開発ライフサイクルを回すために必要な開発者セキュリティについて、またUbieがなぜSnykを選択 したのかについてお話しします。'
          EOS
        },
        {
          title: 'トランクベース開発の実現に向けた開発プロセスとCIパイプラインの継続的改善',
          start_time: '15:20:00',
          end_time: '16:00:00',
          abstract: <<~EOS
            トランクベース開発とは、Gitのようなバージョニングを用いた組織開発において、高いデリバリー速度と開発パフォーマンスを維持するために考案された手法です。
            我々認証認可チームはこの手法を用いた組織開発を2年以上行っており、また並行して開発パフォーマンスの可視化、ボトルネックの洗い出し、そして開発プロセスやCIパイプラインの見直しを通して、開発速度の継続的な改善に努めてきました。本セッションでは、この2年間を通して得られた知見をもとに、トランクベース開発の具体的な実践方法について解説します。
          EOS
        },
        {
          title: 'ローコードで実現するDevOps ～継続的テスト編～',
          start_time: '16:20:00',
          end_time: '17:00:00',
          abstract: <<~EOS
            効果的なテストの自動化は、DevOpsを実現するための重要な手段の1つです。DevOpsの文脈で、様々な自動化がイノベーションを起こすには不可欠であることは周知の事実ですが、皆さまは現状の結果に満足しているでしょうか。
            このセッションでは、mablが提供するローコードプラットフォームによって、パイプライン上に自動テストを直接統合する方法をご紹介し ます。チーム全体がテスト工程を早期に実施(シフトレフト)できるだけでなく、これまで抱えていたパイプライン全体におけるテスト工程の課題を克服する戦略もご紹介します。
          EOS
        },
        {
          title: 'Kubernetesリソースの安定稼働に向けた　TerratestによるHelmチャートのテスト自動化',
          start_time: '17:20:00',
          end_time: '18:00:00',
          abstract: <<~EOS
            ソフトバンクでは、Fluxcdを用いてGitOpsによる開発を進めています。
            GitOpsを実現したことにより、Gitリポジトリのコードの更新だけでデプロイできるため、環境の管理が楽になりました。
            しかし管理するコードが増えるにつれて、デプロイ後のバグが頻出するようになり、品質が低下し管理コストが大幅に増大してしまいました。
            そこで私たちは、品質向上 と生産性向上を目的として、一般的なアプリケーションのように、インフラに対する単体テスト・結合テストを実装しました。
            今回の発表では、Terratestを用いたインフラの単体テスト・結合テストの考え方と実装についてお話します。
          EOS
        }
      ],
      B: [
        {
          title: '自分のデータは自分で守る − あなたのCI/CDパイプラインをセキュアにする処方箋',
          start_time: '15:20:00',
          end_time: '16:00:00',
          abstract: "モダンな開発においてはもはやCI/CDは必要不可欠な時代になりました。しかし、そういった継続的な自動化を行っていくにあたって、全ての人が頭を悩ませているのがシークレットの管理です。なるべく安全な場所にシークレットを保存するのが鉄則ですが、つい最近もCI/CDのサービスから大規模な流出事故が起きました。\r\n\r\nもしそれによって大事なデータが侵害され、顧客に被害が出たとしたらどうしましょう。\r\n流出した原因が自分たちになかったとしても、責任からは逃れられません。自分たちのデータは、自分で守っていかなければならないのです。\r\n\r\nシークレットを守るためには、『シークレットが漏れないように安全に管理する』のが第一ですが、それに加えて『そもそも管理しなくて良いようにする』アプローチもありますし、『漏れたとしても影響がない』ようにすることも大事です。\r\n\r\n本セッションでは、上記のようなCI/CDパイプラインをセキュアにする方法を、HashiCorp Vaultの運用を通じた経験を踏まえながら解説します。"
        },
        {
          title: 'GitHub Actionsと"仲良くなる"ための練習方法',
          start_time: '13:20:00',
          end_time: '14:00:00',
          abstract: "GitHub ActionsでCI/CDを構築するときに「試行錯誤が大変」という課題があると思います。\r\nCI/CDのためのランナーはGitHub上に用意されているものであり、完全なローカル環境での練習が難しいものです。\r\n\r\nそのような課題の解決策として、 https://github.com/nektos/act というOSSがあるのはご存知な方も多いのではないでしょうか。\r\n\r\n本セッションでは、GitHub Actionsを使ってCI/CDの構築をしている方、これから学んでいこうとしている方を対象に、ローカル環境とGitHub環境の2つでの練習方法についてご紹介します。\r\n"
        },
        {
          title: '"State of DevOps" ウェブアプリケーションのdeliveryを考えるとき、今何をすればいいのか(実践編)',
          start_time: '17:20:00',
          end_time: '18:00:00',
          abstract: "State of DevopsなどのreportによってDeliveryにおけるパフォーマンスについて相対的な位置を確認することができるようになってきましたが、一方でどうすればさらに高いパフォーマンスを発揮できるのか、あるいはそもそもどうすれば必要なメトリクスを取得し自身の位置を確認できるのかという課題に関してはあまり議論されていません。\r\n本講演では、CI/CDについて自社の取り組みを紹介しつつ、より一般的に当てはめられるよう、デプロイが手動で実施されているところから理想形まで進んでいくまでのロードマップをCloud Native Trail Mapと比較しつつとりまとめるという取り組みをしてみます。"
        },
        {
          title: 'GitHub ActionsとDeployGateで始めるAndroidアプリのCI/CD',
          start_time: '12:20:00',
          end_time: '13:00:00',
          abstract: "モバイルアプリ開発はWebアプリ開発とは違い、社内で開発版アプリを配布する環境を用意したりアップデートするのが面倒です。\r\n本セッションでは、GitHub ActionsとDeployGateを連携させることで、アプリのUnitTestからDeployGateを用いた開発版アプリの配布までの自動化方法を紹介していきます。"
        },
        {
          title: '昔とあるCI/CDツールを使って馬車馬のように働いていた私が、GitLabを使い始めて気付いた「CI/CDの質」',
          start_time: '16:20:00',
          end_time: '17:00',
          abstract: '「CI/CDを実行できれば、どのツールも同じである」というお考えをお持ちの方はいませんか？実はCI/CDはツールによって質に大きく差が出ることがあります。特に、どのようなスキャンを実施するか、結果をどう管理するか、CI/CDのロジックは誰が管理するか等はプラットフォームに大きく依存します。本講演では、以前別のツールでCI/CDを実行していた私が、GitLabを使うようになって気付いたこと、さらにはより質の高いCI/CDを実施するための方法をお伝えいたします。'
        },
        {
          title: 'Karpenter を活用した GitLab CI/CD ジョブ実行基盤の自動スケール',
          start_time: '14:20:00',
          end_time: '15:00',
          abstract: "GitLab CI/CD は GitLab をリポジトリとして採用しているプロジェクトにおいて，手軽に使える CI/CD ツールとしてよく用いられています。\r\nこのセッションでは，Kubernetes クラスタ上でセルフホストしている GitLab Runner のジョブ実行基盤に Karpenter を導入し，ノードレベルで自動スケールを実現した事例を紹介します。\r\nGitLab をすでにご使用の方や CI/CD 基盤の運用をより効率的に行いたい方は是非ご覧ください。"
        }
      ],
      C: [
        {
          title: 'インフラCI/CDの継続的改善の道のり',
          start_time: '15:20:00',
          end_time: '16:00:00',
          abstract: "ペパボが提供しているサービスのインフラは現在Kubernetesへの移行を積極的に実施しています。一方で歴史の長いサービスではVMで動いているアプリケーションもまだまだあるというのが実情となっています。その中で「インフラのCI/CDが複雑でアプリケーションエンジニアが触りにくくなってしまいインフラの構成変更のたびにSREチームの作業が必要になっている」という課題が発生していました。\r\n本セッションでは「ペパボのインフラCI/CDがどのように実装されているのか」と「抱えていた課題に対してどのように解決するべきかのアイデアと実例」についてご紹介します。"
        },
        {
          title: '小さく始める Blue/Green Deployment',
          start_time: '13:20:00',
          end_time: '14:00:00',
          abstract: "自動運転サービスではエッジからクラウドまでを含めた動作等の複雑な要件のもと、安全性を重視したリリースが求められます。\r\n本セッションでは、メンテナンス時間を設けて安全にリリースを行なっていたシステムを、ダウンタイムなしでリリースが可能な状態にどのように段階的に移行していくかについて、EKS on Fargate 上での Argo Rollouts を使った Blue/Green Deployment の導入を中心に具体例を交えながら紹介します。"
        },
        {
          title: 'インフラ専任者・チームがいない組織で開発ワークフローの継続的改善に挑戦してみた',
          start_time: '12:20:00',
          end_time: '13:00:00',
          abstract: "機能開発を優先するスタートアップで、アプリケーション開発者が開発ワークフローの継続的改善に挑戦しています。\r\n長年使ってきたPaaS（Heroku）では主な顧客である金融機関に求められる高いセキュリティ基準を満たせなかったり、イメージビルド面でもベンダーのライフサイクルに依存してしまう課題などが露呈してきたため、AWSに移行する計画が持ち上がりましたが、PaaSと比べてCDの構築運用負荷が高く、PaaSに回帰しました。\r\n小規模組織での事例として私たちの技術選定や経験を紹介します。"
        },
        {
          title: 'OSSで構築するOpenAPI開発のCI/CD',
          start_time: '17:20:00',
          end_time: '18:00:00',
          abstract: "OpenAPIを開発するときに、リクエストを送信して確認したり、テストケースを実行したりする場面がたくさんあります。\r\n本セッションでは、OpenAPIの設計＆開発、デバッグとユニットテストなどの機能を持つOSSソフトInsomniaから、Kongが提供しているOSSツールとGithub Actionsを利用してOpenAPIを実際に公開するまでの流れをご紹介します。\r\n開発者がOpenAPIのソースコードをコミットした後に、構文チェックから、リクエストの送信、テストケースの実行、プラットフォームへの公開などが全てWorkflowに定義し自動化できます。OpenAPI開発のエコシステムを説明しながら、実際にKong GatewayやDeveloper PortalへのPublishをデモを通して皆様に一緒に体験していきたいと思います。"
        },
        {
          title: 'すべてのアプリにWAFを組み込むCICDの実現 〜開発ツールとしてのNGINX WAF活用方法〜',
          start_time: '14:20:00',
          end_time: '15:00:00',
          abstract: "アプリがマイクロサービス化して数が増えると、同時にセキュリティの懸念も増えてしまいます。開発者を含めて全員がセキュリティを意識しなければセキュアなマイクロサービスの実現は不可能です。\r\n開発者の負担を最小限に、NGINX App Protect WAFを活用してすべてのアプリをセキュアにするCICD、シフトレフトの実現方法についてお話します。"
        },
        {
          title: 'OSSでセキュリティをCI/CDパイプラインに透過的に取込む方法',
          start_time: '16:20:00',
          end_time: '17:00:00',
          abstract: "CI/CDパイプラインを使うことで、アプリケーションのリリーススピードの高速化を実現できるようになりましたが、対策方法によってセキュリティが足かせとなり、リリース作業を遅らせたり、ときには停止させたりすることがあります。\r\nそこで「高速」で「高品質」なデリバリーを実現するためには、下記のようなセキュリティ対策をCICDパイプラインに透過的に取込む必要があります。\r\n・脆弱性とコンプライアンスのスキャン\r\n・不正なデプロイの自動阻止\r\n・Security policy as Codeでポリシー設定の自動化\r\n本セッションでは、100%OSSのNeuVectorで、どのように「高速」で「高品質」なデリバリーを実現するか、デモを交えながら解説します。\r\n"
        }
      ]
    }

    talks.each do |track_name, talks|
      track = conference.tracks.find_by(name: track_name.to_s)
      talks.each do |param|
        talk = Talk.new(param.merge(conference_id: conference.id, conference_day_id: rehearsal_day.id, track_id: track.id, show_on_timetable: true))
        talk.save!
        if talk.abstract != 'intermission'
          proposal = Proposal.new(conference_id: conference.id, talk_id: talk.id, status: 1)
          proposal.save!
        end
        video = Video.new(talk_id: talk.id, on_air: false)
        video.save!
      end
    end
  end
end
