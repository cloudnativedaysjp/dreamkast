class ConferenceDay < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[ConferenceDay, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def date: () -> Date?

    def date=: (Date?) -> Date?

    def date?: () -> bool

    def date_changed?: () -> bool

    def date_change: () -> [ Date?, Date? ]

    def date_will_change!: () -> void

    def date_was: () -> Date?

    def date_previously_changed?: () -> bool

    def date_previous_change: () -> Array[Date?]?

    def date_previously_was: () -> Date?

    def date_before_last_save: () -> Date?

    def date_change_to_be_saved: () -> Array[Date?]?

    def date_in_database: () -> Date?

    def saved_change_to_date: () -> Array[Date?]?

    def saved_change_to_date?: () -> bool

    def will_save_change_to_date?: () -> bool

    def restore_date!: () -> void

    def clear_date_change: () -> void

    def start_time: () -> Time?

    def start_time=: (Time?) -> Time?

    def start_time?: () -> bool

    def start_time_changed?: () -> bool

    def start_time_change: () -> [ Time?, Time? ]

    def start_time_will_change!: () -> void

    def start_time_was: () -> Time?

    def start_time_previously_changed?: () -> bool

    def start_time_previous_change: () -> Array[Time?]?

    def start_time_previously_was: () -> Time?

    def start_time_before_last_save: () -> Time?

    def start_time_change_to_be_saved: () -> Array[Time?]?

    def start_time_in_database: () -> Time?

    def saved_change_to_start_time: () -> Array[Time?]?

    def saved_change_to_start_time?: () -> bool

    def will_save_change_to_start_time?: () -> bool

    def restore_start_time!: () -> void

    def clear_start_time_change: () -> void

    def end_time: () -> Time?

    def end_time=: (Time?) -> Time?

    def end_time?: () -> bool

    def end_time_changed?: () -> bool

    def end_time_change: () -> [ Time?, Time? ]

    def end_time_will_change!: () -> void

    def end_time_was: () -> Time?

    def end_time_previously_changed?: () -> bool

    def end_time_previous_change: () -> Array[Time?]?

    def end_time_previously_was: () -> Time?

    def end_time_before_last_save: () -> Time?

    def end_time_change_to_be_saved: () -> Array[Time?]?

    def end_time_in_database: () -> Time?

    def saved_change_to_end_time: () -> Array[Time?]?

    def saved_change_to_end_time?: () -> bool

    def will_save_change_to_end_time?: () -> bool

    def restore_end_time!: () -> void

    def clear_end_time_change: () -> void

    def conference_id: () -> Integer?

    def conference_id=: (Integer?) -> Integer?

    def conference_id?: () -> bool

    def conference_id_changed?: () -> bool

    def conference_id_change: () -> [ Integer?, Integer? ]

    def conference_id_will_change!: () -> void

    def conference_id_was: () -> Integer?

    def conference_id_previously_changed?: () -> bool

    def conference_id_previous_change: () -> Array[Integer?]?

    def conference_id_previously_was: () -> Integer?

    def conference_id_before_last_save: () -> Integer?

    def conference_id_change_to_be_saved: () -> Array[Integer?]?

    def conference_id_in_database: () -> Integer?

    def saved_change_to_conference_id: () -> Array[Integer?]?

    def saved_change_to_conference_id?: () -> bool

    def will_save_change_to_conference_id?: () -> bool

    def restore_conference_id!: () -> void

    def clear_conference_id_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void

    def internal: () -> bool

    def internal=: (bool) -> bool

    def internal?: () -> bool

    def internal_changed?: () -> bool

    def internal_change: () -> [ bool?, bool? ]

    def internal_will_change!: () -> void

    def internal_was: () -> bool?

    def internal_previously_changed?: () -> bool

    def internal_previous_change: () -> Array[bool?]?

    def internal_previously_was: () -> bool?

    def internal_before_last_save: () -> bool?

    def internal_change_to_be_saved: () -> Array[bool?]?

    def internal_in_database: () -> bool?

    def saved_change_to_internal: () -> Array[bool?]?

    def saved_change_to_internal?: () -> bool

    def will_save_change_to_internal?: () -> bool

    def restore_internal!: () -> void

    def clear_internal_change: () -> void
  end
  include GeneratedAttributeMethods
  def talks: () -> Talk::ActiveRecord_Associations_CollectionProxy
  def talks=: (Talk::ActiveRecord_Associations_CollectionProxy | Array[Talk]) -> (Talk::ActiveRecord_Associations_CollectionProxy | Array[Talk])
  def talk_ids: () -> Array[Integer]
  def talk_ids=: (Array[Integer]) -> Array[Integer]

  def conference: () -> Conference
  def conference=: (Conference?) -> Conference?
  def reload_conference: () -> Conference?
  def build_conference: (untyped) -> Conference
  def create_conference: (untyped) -> Conference
  def create_conference!: (untyped) -> Conference
  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  def self.externals: () -> ActiveRecord_Relation

  module GeneratedRelationMethods
    def externals: () -> ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[ConferenceDay, Integer]
    include Enumerable[ConferenceDay]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[ConferenceDay, Integer]
  end
end
