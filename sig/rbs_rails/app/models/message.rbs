class Message < ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[Message, ActiveRecord_Relation, Integer]

  attr_accessor id(): Integer
  def id_changed?: () -> bool
  def id_change: () -> [ Integer?, Integer? ]
  def id_will_change!: () -> void
  def id_was: () -> Integer?
  def id_previously_changed?: () -> bool
  def id_previous_change: () -> Array[Integer?]?
  def id_previously_was: () -> Integer?
  def id_before_last_save: () -> Integer?
  def id_change_to_be_saved: () -> Array[Integer?]?
  def id_in_database: () -> Integer?
  def saved_change_to_id: () -> Array[Integer?]?
  def saved_change_to_id?: () -> bool
  def will_save_change_to_id?: () -> bool
  def restore_id!: () -> void
  def clear_id_change: () -> void

  attr_accessor content(): String?
  def content_changed?: () -> bool
  def content_change: () -> [ String?, String? ]
  def content_will_change!: () -> void
  def content_was: () -> String?
  def content_previously_changed?: () -> bool
  def content_previous_change: () -> Array[String?]?
  def content_previously_was: () -> String?
  def content_before_last_save: () -> String?
  def content_change_to_be_saved: () -> Array[String?]?
  def content_in_database: () -> String?
  def saved_change_to_content: () -> Array[String?]?
  def saved_change_to_content?: () -> bool
  def will_save_change_to_content?: () -> bool
  def restore_content!: () -> void
  def clear_content_change: () -> void

  attr_accessor text(): String?
  def text_changed?: () -> bool
  def text_change: () -> [ String?, String? ]
  def text_will_change!: () -> void
  def text_was: () -> String?
  def text_previously_changed?: () -> bool
  def text_previous_change: () -> Array[String?]?
  def text_previously_was: () -> String?
  def text_before_last_save: () -> String?
  def text_change_to_be_saved: () -> Array[String?]?
  def text_in_database: () -> String?
  def saved_change_to_text: () -> Array[String?]?
  def saved_change_to_text?: () -> bool
  def will_save_change_to_text?: () -> bool
  def restore_text!: () -> void
  def clear_text_change: () -> void

  attr_accessor created_at(): ActiveSupport::TimeWithZone
  def created_at_changed?: () -> bool
  def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def created_at_will_change!: () -> void
  def created_at_was: () -> ActiveSupport::TimeWithZone?
  def created_at_previously_changed?: () -> bool
  def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_created_at?: () -> bool
  def will_save_change_to_created_at?: () -> bool
  def restore_created_at!: () -> void
  def clear_created_at_change: () -> void

  attr_accessor updated_at(): ActiveSupport::TimeWithZone
  def updated_at_changed?: () -> bool
  def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def updated_at_will_change!: () -> void
  def updated_at_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_previously_changed?: () -> bool
  def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_updated_at?: () -> bool
  def will_save_change_to_updated_at?: () -> bool
  def restore_updated_at!: () -> void
  def clear_updated_at_change: () -> void

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Message, Integer]
    include Enumerable[Message]
  end

  class ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Message, Integer]
  end
end
