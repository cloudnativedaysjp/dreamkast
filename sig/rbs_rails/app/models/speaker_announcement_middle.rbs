class SpeakerAnnouncementMiddle < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[SpeakerAnnouncementMiddle, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def speaker_id: () -> Integer

    def speaker_id=: (Integer) -> Integer

    def speaker_id?: () -> bool

    def speaker_id_changed?: () -> bool

    def speaker_id_change: () -> [ Integer?, Integer? ]

    def speaker_id_will_change!: () -> void

    def speaker_id_was: () -> Integer?

    def speaker_id_previously_changed?: () -> bool

    def speaker_id_previous_change: () -> Array[Integer?]?

    def speaker_id_previously_was: () -> Integer?

    def speaker_id_before_last_save: () -> Integer?

    def speaker_id_change_to_be_saved: () -> Array[Integer?]?

    def speaker_id_in_database: () -> Integer?

    def saved_change_to_speaker_id: () -> Array[Integer?]?

    def saved_change_to_speaker_id?: () -> bool

    def will_save_change_to_speaker_id?: () -> bool

    def restore_speaker_id!: () -> void

    def clear_speaker_id_change: () -> void

    def speaker_announcement_id: () -> Integer

    def speaker_announcement_id=: (Integer) -> Integer

    def speaker_announcement_id?: () -> bool

    def speaker_announcement_id_changed?: () -> bool

    def speaker_announcement_id_change: () -> [ Integer?, Integer? ]

    def speaker_announcement_id_will_change!: () -> void

    def speaker_announcement_id_was: () -> Integer?

    def speaker_announcement_id_previously_changed?: () -> bool

    def speaker_announcement_id_previous_change: () -> Array[Integer?]?

    def speaker_announcement_id_previously_was: () -> Integer?

    def speaker_announcement_id_before_last_save: () -> Integer?

    def speaker_announcement_id_change_to_be_saved: () -> Array[Integer?]?

    def speaker_announcement_id_in_database: () -> Integer?

    def saved_change_to_speaker_announcement_id: () -> Array[Integer?]?

    def saved_change_to_speaker_announcement_id?: () -> bool

    def will_save_change_to_speaker_announcement_id?: () -> bool

    def restore_speaker_announcement_id!: () -> void

    def clear_speaker_announcement_id_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods

  def speaker: () -> Speaker
  def speaker=: (Speaker?) -> Speaker?
  def reload_speaker: () -> Speaker?
  def build_speaker: (untyped) -> Speaker
  def create_speaker: (untyped) -> Speaker
  def create_speaker!: (untyped) -> Speaker
  def speaker_announcement: () -> SpeakerAnnouncement
  def speaker_announcement=: (SpeakerAnnouncement?) -> SpeakerAnnouncement?
  def reload_speaker_announcement: () -> SpeakerAnnouncement?
  def build_speaker_announcement: (untyped) -> SpeakerAnnouncement
  def create_speaker_announcement: (untyped) -> SpeakerAnnouncement
  def create_speaker_announcement!: (untyped) -> SpeakerAnnouncement
  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[SpeakerAnnouncementMiddle, Integer]
    include Enumerable[SpeakerAnnouncementMiddle]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[SpeakerAnnouncementMiddle, Integer]
  end
end
