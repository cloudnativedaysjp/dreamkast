require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe(TalksController, type: :controller) do
  # This should return the minimal set of attributes required to create a valid
  # Talk. As you add validations to Talk, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip("Add a hash of attributes valid for your model")
  end

  let(:invalid_attributes) do
    skip("Add a hash of attributes invalid for your model")
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TalksController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "returns a success response" do
      Talk.create!(valid_attributes)
      get :index, params: {}, session: valid_session
      expect(response).to(be_successful)
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      talk = Talk.create!(valid_attributes)
      get :show, params: { id: talk.to_param }, session: valid_session
      expect(response).to(be_successful)
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      talk = Talk.create!(valid_attributes)
      get :edit, params: { id: talk.to_param }, session: valid_session
      expect(response).to(be_successful)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Talk" do
        expect do
          post(:create, params: { talk: valid_attributes }, session: valid_session)
        end.to(change(Talk, :count).by(1))
      end

      it "redirects to the created talk" do
        post :create, params: { talk: valid_attributes }, session: valid_session
        expect(response).to(redirect_to(Talk.last))
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: { talk: invalid_attributes }, session: valid_session
        expect(response).to(be_successful)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) do
        skip("Add a hash of attributes valid for your model")
      end

      it "updates the requested talk" do
        talk = Talk.create!(valid_attributes)
        put :update, params: { id: talk.to_param, talk: new_attributes }, session: valid_session
        talk.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the talk" do
        talk = Talk.create!(valid_attributes)
        put :update, params: { id: talk.to_param, talk: valid_attributes }, session: valid_session
        expect(response).to(redirect_to(talk))
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        talk = Talk.create!(valid_attributes)
        put :update, params: { id: talk.to_param, talk: invalid_attributes }, session: valid_session
        expect(response).to(be_successful)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested talk" do
      talk = Talk.create!(valid_attributes)
      expect do
        delete(:destroy, params: { id: talk.to_param }, session: valid_session)
      end.to(change(Talk, :count).by(-1))
    end

    it "redirects to the talks list" do
      talk = Talk.create!(valid_attributes)
      delete :destroy, params: { id: talk.to_param }, session: valid_session
      expect(response).to(redirect_to(talks_url))
    end
  end

  describe "display_video?" do
    let!(:category) { create(:talk_category1, conference: conference) }
    let!(:difficulty) { create(:talk_difficulties1, conference: conference) }
    let!(:talk1) { create(:talk1, conference: conference) }

    shared_examples_for :return_true_when_proposal_item_whether_it_can_be_published_is_all_ok do
      context "proposal_item whether_it_can_be_published is all_ok" do
        before do
          allow_any_instance_of(Talk).to(receive(:archived?).and_return(true))
          create(:proposal_item_configs_whether_it_can_be_published, :all_ok, conference: conference)
          create(:proposal_item_whether_it_can_be_published, :all_ok, talk: talk1)
        end
        let!(:talk1) { create(:talk1, :video_published, conference: conference) }
        let!(:video) { create(:video) }

        it_should_behave_like :return_true
      end
    end

    shared_examples_for :return_false_when_proposal_item_whether_it_can_be_published_is_only_slide do
      context "proposal_item whether_it_can_be_published is only_slide" do
        before do
          allow_any_instance_of(Talk).to(receive(:archived?).and_return(true))
          create(:proposal_item_configs_whether_it_can_be_published, :only_slide, conference: conference)
          create(:proposal_item_whether_it_can_be_published, :only_slide, talk: talk1)
        end
        let!(:talk1) { create(:talk1, :video_published, conference: conference) }
        let!(:video) { create(:video) }

        it_should_behave_like :return_false
      end
    end

    shared_examples_for :return_true_when_proposal_item_whether_it_can_be_published_is_only_video do
      context "proposal_item whether_it_can_be_published is only_video" do
        before do
          allow_any_instance_of(Talk).to(receive(:archived?).and_return(true))
          create(:proposal_item_configs_whether_it_can_be_published, :only_video, conference: conference)
          create(:proposal_item_whether_it_can_be_published, :only_video, talk: talk1)
        end
        let!(:talk1) { create(:talk1, :video_published, conference: conference) }
        let!(:video) { create(:video) }

        it_should_behave_like :return_true
      end
    end

    shared_examples_for :return_false_when_proposal_item_whether_it_can_be_published_is_all_ng do
      context "proposal_item whether_it_can_be_published is all_ng" do
        before do
          allow_any_instance_of(Talk).to(receive(:archived?).and_return(true))
          create(:proposal_item_configs_whether_it_can_be_published, :all_ng, conference: conference)
          create(:proposal_item_whether_it_can_be_published, :all_ng, talk: talk1)
        end
        let!(:talk1) { create(:talk1, :video_published, conference: conference) }
        let!(:video) { create(:video) }

        it_should_behave_like :return_false
      end
    end

    shared_examples_for :return_true_when_video_is_published_and_present_and_archived do
      context "talk is video_published, video is present and talk is archived" do
        before do
          allow_any_instance_of(Talk).to(receive(:archived?).and_return(true))
        end
        let!(:talk1) { create(:talk1, :video_published, conference: conference) }
        let!(:video) { create(:video) }

        it_should_behave_like :return_true
      end
    end

    shared_examples_for :return_false_when_video_is_not_published do
      context "video isn't published" do
        before do
          allow_any_instance_of(Talk).to(receive(:archived?).and_return(true))
        end
        let!(:talk1) { create(:talk1, :video_not_published, conference: conference) }
        let!(:video) { create(:video) }

        it_should_behave_like :return_false
      end
    end

    shared_examples_for :return_false_when_video_is_not_present do
      context "video isn't present" do
        before do
          allow_any_instance_of(Talk).to(receive(:archived?).and_return(true))
        end
        let!(:talk1) { create(:talk1, :video_not_published, conference: conference) }

        it_should_behave_like :return_false
      end
    end

    shared_examples_for :return_false_video_is_not_archived do
      context "talk isn't archived" do
        before do
          allow_any_instance_of(Talk).to(receive(:archived?).and_return(false))
        end
        let!(:talk1) { create(:talk1, :video_published, conference: conference) }

        it_should_behave_like :return_false
      end
    end

    shared_examples_for :return_true do
      it "returns true" do
        controller = TalksController.new
        expect(controller.display_video?(talk1)).to(be_truthy)
      end
    end

    shared_examples_for :return_false do
      it "returns false" do
        controller = TalksController.new
        expect(controller.display_video?(talk1)).to(be_falsey)
      end
    end

    context "user logged in" do
      before do
        allow_any_instance_of(TalksController).to(receive(:logged_in?).and_return(true))
      end

      context "conference is registered" do
        let!(:conference) { create(:cndt2020, :registered) }

        it_should_behave_like :return_false
      end

      context "conference is opened" do
        let!(:conference) { create(:cndt2020, :opened) }

        it_should_behave_like :return_true_when_video_is_published_and_present_and_archived
        it_should_behave_like :return_false_when_video_is_not_published
        it_should_behave_like :return_false_when_video_is_not_present
        it_should_behave_like :return_false_video_is_not_archived

        it_should_behave_like :return_true_when_proposal_item_whether_it_can_be_published_is_all_ok
        it_should_behave_like :return_false_when_proposal_item_whether_it_can_be_published_is_only_slide
        it_should_behave_like :return_true_when_proposal_item_whether_it_can_be_published_is_only_video
        it_should_behave_like :return_false_when_proposal_item_whether_it_can_be_published_is_all_ng
      end

      context "conference is closed" do
        let!(:conference) { create(:cndt2020, :closed) }

        it_should_behave_like :return_true_when_video_is_published_and_present_and_archived
        it_should_behave_like :return_false_when_video_is_not_published
        it_should_behave_like :return_false_when_video_is_not_present
        it_should_behave_like :return_false_video_is_not_archived

        it_should_behave_like :return_true_when_proposal_item_whether_it_can_be_published_is_all_ok
        it_should_behave_like :return_false_when_proposal_item_whether_it_can_be_published_is_only_slide
        it_should_behave_like :return_true_when_proposal_item_whether_it_can_be_published_is_only_video
        it_should_behave_like :return_false_when_proposal_item_whether_it_can_be_published_is_all_ng
      end

      context "conference is archived" do
        let!(:conference) { create(:cndt2020, :archived) }

        it_should_behave_like :return_true_when_video_is_published_and_present_and_archived
        it_should_behave_like :return_false_when_video_is_not_published
        it_should_behave_like :return_false_when_video_is_not_present
        it_should_behave_like :return_false_video_is_not_archived

        it_should_behave_like :return_true_when_proposal_item_whether_it_can_be_published_is_all_ok
        it_should_behave_like :return_false_when_proposal_item_whether_it_can_be_published_is_only_slide
        it_should_behave_like :return_true_when_proposal_item_whether_it_can_be_published_is_only_video
        it_should_behave_like :return_false_when_proposal_item_whether_it_can_be_published_is_all_ng
      end
    end

    context "user doesn't logged in" do
      before do
        allow_any_instance_of(TalksController).to(receive(:logged_in?).and_return(false))
      end

      context "conference is registered" do
        let!(:conference) { create(:cndt2020, :registered) }

        it_should_behave_like :return_false
      end

      context "conference is opened" do
        let!(:conference) { create(:cndt2020, :opened) }

        it_should_behave_like :return_false
      end

      context "conference is closed" do
        let!(:conference) { create(:cndt2020, :closed) }

        it_should_behave_like :return_false
      end

      context "conference is archived" do
        let!(:conference) { create(:cndt2020, :archived) }

        it_should_behave_like :return_true_when_video_is_published_and_present_and_archived
        it_should_behave_like :return_false_when_video_is_not_published
        it_should_behave_like :return_false_when_video_is_not_present
        it_should_behave_like :return_false_video_is_not_archived

        it_should_behave_like :return_true_when_proposal_item_whether_it_can_be_published_is_all_ok
        it_should_behave_like :return_false_when_proposal_item_whether_it_can_be_published_is_only_slide
        it_should_behave_like :return_true_when_proposal_item_whether_it_can_be_published_is_only_video
        it_should_behave_like :return_false_when_proposal_item_whether_it_can_be_published_is_all_ng
      end
    end
  end
end
